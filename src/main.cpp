#include <iostream>
#include <bitset>
#include <boost\program_options.hpp>
#include <cstdlib>

namespace
{
    std::bitset<5> parseArgument(int argc, const char **argv)
    {
        std::bitset<5> flags;
        boost::program_options::options_description description("Activate Windows built-in Administrator account and some useful tools.\r\n");
        description.add_options()("help,h", "show help")("verbose,V", "enable Verbose Mode.")("version,v", "Show Version.")("status,s", "show exploit status.")("status-in-detail,S","show exploit status in detail.")("edit-registry,e", "enter registry edit mode.")("exploit", "execute exploit.")("revert", "reset exploit.");
        boost::program_options::variables_map vm;
        try
        {
            store(boost::program_options::parse_command_line(argc, argv, description), vm);
            notify(vm);
            if (vm.count("help"))
            {
                std::cout << description << std::endl;
                std::exit(0);
            }
            if (vm.count("version"))
            {
                std::cout << "schoolpc_exploit v0.01" << std::endl;
                std::exit(0);
            }
            if (vm.count("edit-registry"))
            {
                std::system("notepad.exe");
                std::exit(0);
            }
            if (vm.count("revert"))
            {
                // expect 00001
                flags.set(0);
            }
            if (vm.count("exploit"))
            {
                // expect 00010
                flags.set(1);
            }
            if (vm.count("status"))
            {
                // expect 00100
                flags.set(2);
            }
            if (vm.count("status-in-detail"))
            {
                // expect 01000
                flags.set(3);
            }
            if (vm.count("verbose"))
            {
                // expect 10000
                flags.set(4);
            }
            flags.count();
            if (!(flags.count() == 1 && !flags.test(4)) ||
                !(flags.count() == 2 && flags.test(4)))
            {
                std::cerr << "Required only one arugument \r\n"
                             "or one arugument and verbose flag"
                          << std::endl;
                std::exit(1);
            }
            return flags;
        }
        catch (const std::exception &e)
        {
            std::cerr << e.what() << std::endl;
            std::exit(1);
        }
    }
} // namespace

int main(int argc, const char **argv)
{
    auto flags = parseArgument(argc, argv);
    bool isVerbose = flags.test(3);
    if (flags.test(2))
    {

    }
    return 0;
}